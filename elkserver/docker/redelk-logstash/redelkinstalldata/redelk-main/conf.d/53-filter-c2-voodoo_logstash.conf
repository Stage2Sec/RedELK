# In this file we configure the logstash filters for Voodoo logs

filter {
    if [infra][log][type] == "rtops" and [c2][program] == "voodoo" {
        mutate {
            rename => {
                "[json]" => "[message]"
            }
        }

        mutate {
            copy => {
                "[message][timestamp]" => "[c2][timestamp]"
                "[message][implant_id]" => "[implant][id]"
            }
        }

        # Set the timestamp from the log to @timestamp
        date {
          match => [ "[c2][timestamp]", "yyyy-MM-dd HH:mm:ss" ]
          target => "@timestamp"
        }

        # The host name lies
        mutate {
            remove_field => ["[host][name]"]
        }
        mutate {
            copy => {
                "[message][host_name]" => "[host][name]"
                "[message][user_name]" => "[user][name]"
            }
        }

        if [c2][log][type] == "implant_task" {
            mutate {
                copy => {
                    "[message][id]" => "[implant][task_id]"
                    "[message][commandline]" => "[implant][task]"
                    "[message][output]" => "[c2][message]"
                    "[message][user]" => "[implant][operator]"
                }
            }

            if [message][command] == "ipinfo" {
                mutate {
                    add_field => {
                        "[@metadata][clone]" => "true"
                    }
                }
                ruby {
                    code => '
                        a = event.get("[message][json]")
                        if a
                            b = []
                            a.each { |x|
                                b << x["address"]
                            }
                            event.set("[host][ip_int]", b)
                        end
                    '
                }
                mutate {
                    copy => {"[host][ip_int]" => "[host][ip]"}
                }
            }
            if [message][command] == "whoami" {
                mutate {
                    add_field => {
                        "[@metadata][clone]" => "true"
                    }
                }
                mutate {
                    copy => { "[c2][message]" => "[user][name]" }
                }
            }
            if [message][command] == "sysinfo" {
                mutate {
                    add_field => {
                        "[@metadata][clone]" => "true"
                    }
                }
                # The host name always lies so see if we have what we need
                mutate {
                    remove_field => ["[host][name]"]
                }
                # For Windows:
                #   hostname
                #   Windows 10 10.0.12345
                #   (optional) Domain Controller
                grok {
                    match => {
                        "[c2][message]" => "(?m)(?<[host][name]>[^\n]*)\n(?<[host][os][full]>[^\n]*)(\n(?<[@metadata][extra]>.*))?"
                    }
                }
                grok {
                    match => {
                        "[host][os][full]" => "(?<[host][os][name]>\S+).*"
                    }
                }
                mutate {
                    copy => {
                        "[host][os][name]" => "[host][os][platform]"
                        "[host][os][platform]" => "[host][os][family]"
                    }
                }
                if [host][os][name] == "Windows" {
                    grok {
                        match => {
                            "[host][os][full]" => ".* (?<[host][os][version]>\S+\.\S+\.\S+)"
                        }
                    }
                }
                else {
                    grok {
                        match => {
                            "[host][os][full]" => "\S+ (?<[host][os][kernel]>.*)"
                        }
                    }
                }
            }

            # Finally, if we need to clone to the implantsdb then do so
            if [@metadata][clone] == "true" {
                clone {
                    clones => [ "implantsdb" ]
                    remove_field => [ "[c2][log][type]","[c2][message]","[infra][log][type]","[message]" ]
                    add_field => {
                        "[@metadata][document_id]" => "%{[agent][name]}-%{[implant][id]}"
                    }
                }
            }
        }

        if [c2][log][type] == "downloads" {
            mutate {
                copy => {
                    "[message][task_id]" => "[implant][task_id]"
                    "[message][file_id]" => "[file][id]"
                    "[message][file_name]" => "[file][name]"
                    "[message][file_directory]" => "[file][directory]"
                }
            }

            ruby {
                code => '/c2logs/
                    home = "/usr/share/logstash"
                    host = event.get("[agent][name]")
                    file_id = event.get("[message][file_id]")
                    file_name = File.basename(event.get("[message][file_name]"))
                    chunk = event.get("[message][chunk]")
                    chunk_size = event.get("[message][chunk_size]")
                    data = Base64.decode64(event.get("[message][data]"))
                    path = "/c2logs/#{host}/downloads"
                    file_path = path+"/#{file_id}_#{file_name}"
                    FileUtils.mkdir_p(home+path)
                    event.tag("_rubyparseok")
                    event.set("[file][url]", file_path)
                    FileUtils.touch(home+file_path)
                    File.open(home+file_path,"r+b") do |f|
                        f.seek(chunk*chunk_size)
                        f.write(data)
                    end
                '
            }

            mutate {
                remove_field => ["[message][data]"]
                add_field => {
                    "[@metadata][document_id]" => "%{[agent][name]}-%{[implant][id]}-%{[implant][task_id]}-%{[file][id]}"
                }
            }
        }

        if [c2][log][type] == "implant_newimplant" {
            mutate {
                copy => {
                    "[message][id]" => "[implant][id]"
                    "[message][version]" => "[implant][version]"
                    "[message][arch]" => "[implant][arch]"
                    "[message][platform]" => "[host][os][platform]"
                    "[message][ip]" => "[host][ip_ext]"
                }
                add_field => {
                    "[@metadata][document_id]" => "%{[agent][name]}-%{[implant][id]}"
                }
            }
            clone {
                clones => [ "implantsdb" ]
                remove_field => [ "[c2][log][type]","[c2][message]","[infra][log][type]" ]
                #add_field => {
                    #"[@metadata][document_id]" => "%{[agent][name]}-%{[implant][id]}"
                #}
            }
        }

        # Convert the JSON message to a string
        ruby {
            code => '
                a = event.get("message")
                a = JSON.dump(a)
                event.set("message", a)
            '
        }

        if ![@metadata][document_id] {
            mutate {
                add_field => {
                    "[@metadata][document_id]" => "%{[agent][name]}-%{[implant][id]}-%{[implant][task_id]}"
                }
            }
        }

        # Add metadata for SIEM
        mutate {
            add_field => {
                "[event][kind]" => "event"
                "[event][category]" => "host"
                "[event][module]" => "redelk"
                "[event][dataset]" => "c2"
                "[event][action]" => "%{[c2][log][type]}"
            }
            copy => {
                "[c2][log][type]" => "[event][type]"
            }
        }
    }
}
